import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter_application_1/utils/colors.dart';
import 'package:intl/intl.dart';

class BarChartComponent extends StatelessWidget {
  final List<dynamic> apiData;
  final String granularity; // "Day", "Month", etc.
  final String yAxisMetric; // "totalSales", "unitCount", etc.

  const BarChartComponent({
    Key? key,
    required this.apiData,
    required this.granularity,
    required this.yAxisMetric,
  }) : super(key: key);

  List<BarChartGroupData> generateBarGroups() {
    List<BarChartGroupData> barGroups = [];

    for (int i = 0; i < apiData.length; i++) {
      var entry = apiData[i];
      double yValue = extractMetric(entry, yAxisMetric);

      barGroups.add(
        BarChartGroupData(
          x: i,
          barRods: [
            BarChartRodData(
              toY: yValue,
              color: AppColors.primaryBlue,
              width: granularity == "Day" ? 10: 20,
              borderRadius: BorderRadius.zero,
            ),
          ],
        ),
      );
    }

    return barGroups;
  }

  // Function to format interval into x-axis label
  String formatInterval(String interval, String granularity) {
    DateTime startDate = DateTime.parse(interval.split('--')[0]).toLocal();
    if (granularity == "Month") {
      return DateFormat.MMM().format(startDate); // Jan, Feb, etc.
    } else if (granularity == "Day") {
      int day = startDate.day;
      if (day % 5 == 0 || day == 1) { 
        return DateFormat.MMMd().format(startDate); 
      }else{
       return "";
      }
      // return DateFormat.d().format(startDate); // 1, 2, ..., 31
    } else {
      return DateFormat.yMd().format(startDate); // Default fallback
    }
  }

  // Extracts the y-axis metric value from API data
  double extractMetric(Map<String, dynamic> entry, String metric) {
    if (metric == "totalSales") {
      return entry["totalSales"]["amount"].toDouble();
    } else if (metric == "unitCount") {
      return entry["unitCount"].toDouble();
    } else if (metric == "orderCount") {
      return entry["orderCount"].toDouble();
    } else {
      return 0.0; // Default fallback
    }
  }

  String formatYAxisLabel(double value) {
    if (value >= 1000) {
      return '${(value / 1000).toStringAsFixed(1)}K';
    }
    return value.toStringAsFixed(0);
  }

  @override
  Widget build(BuildContext context) {
    return AspectRatio(
      aspectRatio: 2,
      child: BarChart(
        BarChartData(
          barGroups: generateBarGroups(),
          borderData: FlBorderData(show: false),
          gridData: FlGridData(
            drawVerticalLine: false,
            drawHorizontalLine: true,
            getDrawingHorizontalLine: (value) => FlLine(
              color: AppColors.gold, // Set line color
              strokeWidth: 0.5, // Increase width for better visibility
            ),
          ),
          titlesData: FlTitlesData(
            leftTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                getTitlesWidget: (double value, TitleMeta meta) {
                    return Text(
                      formatYAxisLabel(value).toString(),
                      style: TextStyle(fontSize: 7),
                    );
                  
                },
                ),
              axisNameSize: 2,
            ),
            rightTitles: AxisTitles(
              sideTitles: SideTitles(showTitles: false), // Hide right side labels
            ),
            topTitles: AxisTitles(
              sideTitles: SideTitles(showTitles: false), // Hide top labels
            ),
            bottomTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                getTitlesWidget: (double value, TitleMeta meta) {
                  if (value < apiData.length) {
                    return Text(
                      formatInterval(apiData[value.toInt()]['interval'], granularity),
                      style: TextStyle(fontSize: 10),
                    );
                  }
                  return Text('');
                },
              ),
            ),
          ),
        ),
      ),
    );
  }
}
